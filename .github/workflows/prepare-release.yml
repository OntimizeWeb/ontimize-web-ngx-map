---
name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      RELEASE_TYPE:
        description: 'Release type'
        required: true
        default: 'minor'
        type: choice
        options:
          - "minor"
          - "hotfix"
          - "rc"
          - "beta"
      RELEASE_CANDIDATE_VERSION:
        description: "Release candidate version (e.g. 15.0.0-rc.0)"
      BETA_VERSION:
        description: "Beta version (e.g. 15.0.0-beta.0)"

env:
  NPM_REGISTRY: https://registry.npmjs.org/
  CI_EMAIL: ontimize-web@imatia.com
  CI_USERNAME: ontimize-web
  MAIN_BRANCH: quickstart-15.x.x
  DEVELOP_BRANCH: quickstart-15.x.x-develop

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Get input parameters
        id: parameters
        run: |
          if [ "${{ github.event.inputs.RELEASE_TYPE }}" = "hotfix" ]; then
            BASELINE_BRANCH=${{ env.MAIN_BRANCH }}
            isHotfix=1
            isMinor=0
            isRC=0
            isBeta=0
          elif [ "${{ github.event.inputs.RELEASE_TYPE }}" = "rc" ]; then
            BASELINE_BRANCH=${{ env.DEVELOP_BRANCH }}
            isHotfix=0
            isMinor=0
            isRC=1
            isBeta=0
          elif [ "${{ github.event.inputs.RELEASE_TYPE }}" = "beta" ]; then
            BASELINE_BRANCH=${{ env.DEVELOP_BRANCH }}
            isHotfix=0
            isMinor=0
            isRC=0
            isBeta=1
          else
            BASELINE_BRANCH=${{ env.DEVELOP_BRANCH }}
            isHotfix=0
            isMinor=1
            isRC=0
            isBeta=0
          fi
          echo "BASELINE_BRANCH=$BASELINE_BRANCH" >> $GITHUB_ENV
          echo "isHotfix=$isHotfix" >> $GITHUB_OUTPUT
          echo "isMinor=$isMinor" >> $GITHUB_OUTPUT
          echo "isRC=$isRC" >> $GITHUB_OUTPUT
          echo "isBeta=$isBeta" >> $GITHUB_OUTPUT

      - name: Setup release candidate version
        if: ${{ steps.parameters.outputs.isRC == true }}
        id: release-candidate
        run: |
          versionNumber=${{ github.event.inputs.RELEASE_CANDIDATE_VERSION}}
          if [[ $versionNumber =~ ^[0-9]+\.[0-9]+\.[0-9]+\-rc\.[0-9]+ ]]; then
            echo "version=${BASH_REMATCH[0]}" >> $GITHUB_OUTPUT
          else
            echo "Invalid Release Candidate version"
            exit 1
          fi

      - name: Setup Beta version
        if: ${{ steps.parameters.outputs.isBeta == true }}
        id: beta
        run: |
          versionNumber=${{ github.event.inputs.BETA_VERSION}}
          if [[ $versionNumber =~ ^[0-9]+\.[0-9]+\.[0-9]+\-beta\.[0-9]+ ]]; then
            echo "version=${BASH_REMATCH[0]}" >> $GITHUB_OUTPUT
          else
            echo "Invalid Beta version"
            exit 1
          fi

      - name: Checkout merge commit
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BASELINE_BRANCH }}
          fetch-depth: 0

      - name: Node 18.x
        uses: actions/setup-node@v3
        with:
          node-version: 18.10.0
          registry-url: ${{ env.NPM_REGISTRY }}

      - name: obtain package.json version
        id: project
        run: |
          echo "version=$(node -pe "require('./package.json')['version']")" >> $GITHUB_OUTPUT

      - name: Prepare git information
        run: |
          git config user.name "$CI_USERNAME"
          git config user.email "$CI_EMAIL"

      ## MINOR
      - name: bumping minor version in package.json
        if: ${{ steps.parameters.outputs.isMinor == true }}
        run: |
          version=$(echo "${{ steps.project.outputs.version }}" | sed 's/-SNAPSHOT-[0-9]//')
          npm version $version --no-git-tag-version
          echo "RELEASE_VERSION=$(node -pe "require('./package.json')['version']")" >> $GITHUB_ENV

      ## RELEASE CANDIDATE
      - name: bumping rc version in package.json
        if: ${{ steps.parameters.outputs.isRC == true }}
        run: |
          version=$(echo "${{ steps.release-candidate.outputs.version }}")
          npm version $version --no-git-tag-version
          echo "RELEASE_VERSION=$(node -pe "require('./package.json')['version']")" >> $GITHUB_ENV

      ## Beta
      - name: bumping beta version in package.json
        if: ${{ steps.parameters.outputs.isBeta == true }}
        run: |
          version=$(echo "${{ steps.beta.outputs.version }}")
          npm version $version --no-git-tag-version
          echo "RELEASE_VERSION=$(node -pe "require('./package.json')['version']")" >> $GITHUB_ENV

      ## HOTFIX
      - name: bumping hotfix version in package.json
        if: ${{ steps.parameters.outputs.isHotfix == true }}
        run: |
          npm version patch --no-git-tag-version
          echo "RELEASE_VERSION=$(node -pe "require('./package.json')['version']")" >> $GITHUB_ENV

      - name: Create release branch
        if: ${{ steps.parameters.outputs.isMinor == true }} || ${{ steps.parameters.outputs.isRC == true }} || ${{ steps.parameters.outputs.isBeta == true }}
        run: |
          version=${{ env.RELEASE_VERSION }}
          git checkout -b quickstart-release/$version

          git add .
          git commit -m "Prepare Quickstart release $version"
          git push origin  quickstart-release/$version

      - name: Create hotfix branch
        if: ${{ steps.parameters.outputs.isHotfix == true }}
        run: |
          version=${{ env.RELEASE_VERSION }}
          git checkout -b  quickstart-hotfix/$version

          git add .
          git commit -m "Prepare Quickstart hotfix $version"
          git push origin  quickstart-hotfix/$version

      - name: Create Release pull request
        if: ${{ steps.parameters.outputs.isHotfix == false }}
        env:
          GITHUB_TOKEN: ${{ secrets.OWEB_GH_TOKEN_PUSH }}
        run: |
          version=${{ env.RELEASE_VERSION }}
          gh pr create -B ${{ env.MAIN_BRANCH }} -H quickstart-release/$version --title "[Quickstart Map] Release $version" --body "" --draft --label "release"

      - name: Create Hotfix pull request
        if: ${{ steps.parameters.outputs.isHotfix == true }}
        env:
          GITHUB_TOKEN: ${{ secrets.OWEB_GH_TOKEN_PUSH }}
        run: |
          version=${{ env.RELEASE_VERSION }}
          gh pr create -B ${{ env.MAIN_BRANCH }} -H quickstart-hotfix/$version --title "[Quickstart Map] Hotfix $version" --body "" --draft --label "release"

